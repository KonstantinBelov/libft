void				*ft_memset(void *b, int c, size_t len);

memset -- fill a byte string with a byte value
The memset() function writes len bytes of value c (converted to an unsigned char) to the string b.
The memset() function returns its first argument.

void				ft_bzero(void *s, size_t n);

bzero -- write zeroes to a byte string
The bzero() function writes n zeroed bytes to the string s.  If n is zero, bzero() does nothing.

void				*ft_memcpy(void *restrict dst, const void *restrict src, size_t n);

memcpy -- copy memory area

The memcpy() function copies n bytes from memory area src to memory area dst.  If dst and src overlap, behavior is undefined.  Applications in which dst and src might overlap should use memmove(3) instead.
The memcpy() function returns the original value of dst.

void				*ft_memccpy(void *restrict d, const void *restrict s, int c, size_t n);

memccpy -- copy string until character found
The memccpy() function copies bytes from string src to string dst.  If the character c (as converted
to an unsigned char) occurs in the string src, the copy stops and a pointer to the byte after the copy of c in the string dst is returned.  Otherwise, n bytes are copied, and a NULL pointer is returned.
The source and destination strings should not overlap, as the behavior is undefined.

void				*ft_memmove(void *dst, const void *src, size_t len);

memmove -- copy byte string
The memmove() function copies len bytes from string src to string dst.  The two strings may overlap;
the copy is always done in a non-destructive manner.
The memmove() function returns the original value of dst.

void				*ft_memchr(const void *s, int c, size_t n);

memchr -- locate byte in byte string
The memchr() function locates the first occurrence of c (converted to an unsigned char) in string s.
The memchr() function returns a pointer to the byte located, or NULL if no such byte exists within n bytes.

int				ft_memcmp(const void *s1, const void *s2, size_t n);

memcmp -- compare byte string
The memcmp() function compares byte string s1 against byte string s2.  Both strings are assumed to be n bytes long.
The memcmp() function returns zero if the two strings are identical, otherwise returns the difference between the first two differing bytes (treated as unsigned char values, so that `\200' is greater than `\0', for example).  Zero-length strings are always identical.  This behavior is not required by C and portable code should only depend on the sign of the returned value.

size_t				ft_strlen(const char *s);

strlen, strnlen -- find length of string
The strlen() function computes the length of the string s.
The strlen() function returns the number of characters that precede the terminating NUL character.

char				*ft_strdup(const char *s1);

strdup, strndup -- save a copy of a string
The strdup() function allocates sufficient memory for a copy of the string s1, does the copy, and returns a pointer to it.  The pointer may subsequently be used as an argument to the function free(3).
If insufficient memory is available, NULL is returned and errno is set to ENOMEM.

char				*ft_strcpy(char *dst, const char *src);

The stpcpy() and strcpy() functions copy the string src to dst (including the terminating `\0' character.)
The source and destination strings should not overlap, as the behavior is undefined.
The strcpy() and strncpy() functions return dst.

char				*ft_strncpy(char *dst, const char *src, size_t len);

The stpncpy() and strncpy() functions copy at most len characters from src into dst.  If src is less than len characters long, the remainder of dst is filled with `\0' characters.  Otherwise, dst is not terminated.
The source and destination strings should not overlap, as the behavior is undefined.
The strcpy() and strncpy() functions return dst.

char				*ft_strcat(char *restrict s1, const char *restrict s2);

The strcat() and strncat() functions append a copy of the null-terminated string s2 to the end of the null-terminated string s1, then add a terminating `\0'.  The string s1 must have sufficient space to hold the result.

char				*ft_strncat(char *restrict s1, const char *restrict s2, size_t n);
size_t				ft_strlcat(char *restrict dst, const char *restrict src, size_t dstsize);
char				*ft_strchr(const char *s, int c);
char				*ft_strrchr(const char *s, int c);
char				*ft_strstr(const char *haystack, const char *needle);
char				*ft_strnstr(const char *haystack, const char *needle, size_t len);
int				ft_strcmp(const char *s1, const char *s2);
int				ft_strncmp(const char *s1, const char *s2, size_t n);

int				ft_atoi(const char *str);
int				ft_isalpha(int c);
int				ft_isdigit(int c);
int				ft_isalnum(int c);
int				ft_isascii(int c);
int				ft_isprint(int c);
int				ft_toupper(int c);
int				ft_tolower(int c);

void				*ft_memalloc(size_t size);
void				ft_memdel(void **ap);
char				*ft_strnew(size_t size);
void				ft_strdel(char **as);
void				ft_strclr(char *s);
void				ft_striter(char *s, void (*f)(char *));
void				ft_striteri(char *s, void (*f)(unsigned int, char *));
char				*ft_strmap(char const *s, char (*f)(char));
char				*ft_strmapi(char const *s, char (*f)(unsigned int, char));
int				ft_strequ(char const *s1, char const *s2);
int				ft_strnequ(char const *s1, char const *s2, size_t n);
char				*ft_strsub(char const *s, unsigned int start, size_t len);
char				*ft_strjoin(char const *s1, char const *s2);
char				*ft_strtrim(char const *s);
char				**ft_strsplit(char const *s, char c);
char				*ft_itoa(int n);
void				ft_putchar(char c);
void				ft_putstr(char const *s);
void				ft_putendl(char const *s);
void				ft_putnbr(int n);
void				ft_putchar_fd(char c, int fd);
void				ft_putstr_fd(char const *s, int fd);
void				ft_putendl_fd(char const *s, int fd);
void				ft_putnbr_fd(int n, int fd);

typedef	struct		s_list
{
	void		*content;
	size_t		content_size;
	struct s_list	*next;
}			t_list;

t_list				*ft_lstnew(void const *content, size_t content_size);
void				ft_lstdelone(t_list **alst, void (*del)(void *, size_t));
void				ft_lstdel(t_list **alst, void (*del)(void *, size_t));
void				ft_lstadd(t_list **alst, t_list *new);
void				ft_lstiter(t_list *lst, void (*f)(t_list *elem));
t_list				*ft_lstmap(t_list *lst, t_list *(*f)(t_list *elem));

unsigned int			ft_numlen(int n);
size_t				ft_strsplit_len(char const *s, char c);
size_t				ft_word_len(char const *s, size_t start, char c);
int				ft_isspace(char c);
int				ft_abs(int n);
